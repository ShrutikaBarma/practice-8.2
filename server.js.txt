const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
app.use(cors());
app.use(bodyParser.json());

const PORT = 5000;
const SECRET_KEY = 'your_jwt_secret_key';

// Mock user database
const users = [
  { id: 1, username: 'user1', password: bcrypt.hashSync('password1', 8) },
];

// --- Routes ---

// 1. Register User (optional)
app.post('/register', (req, res) => {
  const { username, password } = req.body;
  const hashedPassword = bcrypt.hashSync(password, 8);
  users.push({ id: users.length + 1, username, password: hashedPassword });
  res.json({ message: 'User registered successfully!' });
});

// 2. Login User
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username);

  if (!user) return res.status(404).json({ message: 'User not found' });

  const passwordIsValid = bcrypt.compareSync(password, user.password);
  if (!passwordIsValid) return res.status(401).json({ message: 'Invalid password' });

  // Create JWT
  const token = jwt.sign({ id: user.id, username: user.username }, SECRET_KEY, { expiresIn: '1h' });
  res.json({ token });
});

// 3. Protected Route Middleware
function verifyToken(req, res, next) {
  const token = req.headers['authorization']; // Bearer <token>
  if (!token) return res.status(403).json({ message: 'No token provided' });

  const actualToken = token.split(' ')[1]; // Remove 'Bearer '

  jwt.verify(actualToken, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ message: 'Failed to authenticate token' });
    req.userId = decoded.id;
    next();
  });
}

// 4. Protected Route
app.get('/profile', verifyToken, (req, res) => {
  const user = users.find(u => u.id === req.userId);
  res.json({ id: user.id, username: user.username });
});

// --- Start Server ---
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
